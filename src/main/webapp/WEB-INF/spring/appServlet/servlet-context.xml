<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />  <!-- 스프링 어노테이션을 사용하기 위해 넣는 태그 -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" /> <!-- 우리 리소스를 간단하게 매핑하기 위해 넣음 -->
	<!--  파일 업로드 경로 설정  : file로 들어오는 모든 경로를 c:/code/upload로 매핑 -->
	<resources mapping="/file/**" location="file:///c:/code/upload"></resources>
	
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />  <!-- 서블릿에서 Wrapper 역할 -->
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!--  @Component, @Repository, @Service, @Controller -->
	<context:component-scan base-package="com.kh.spring" />
	
	
	
	<!--  filter 등록하기 : AuthIntercepter-->
	
	<interceptors>
		<interceptor>
			<mapping path="/**"/>
			<beans:bean class="com.kh.spring.common.interceptor.AuthInterceptor"></beans:bean>
		</interceptor>
	</interceptors>
	
	
	<!-- 트랜잭션 관리 Bean 등록 -->
	
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
		<beans:constructor-arg name="dataSource" ref="dataSource"></beans:constructor-arg>
	</beans:bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 트랜잭션 처리에 사용할 메서드 네임패턴과 트랜잭션 정책
			tx:method 속성값
				1)isolation: 격리 레벨, 데이터에 작업이 수행되고 있을 때 해당 데이터를 격리 시키는 수준
					-default: 데이터 베이스의 격리레벨을 따라감(보통 이거씀)
					-read_commited : commit이 끝난 데이터만 읽기를 허용 (이게 오라클 default)
					-read_uncommited : commit이 끝나지 않은 데이터도 읽기를 허용
					-repeatable_read : select문이 사용되는 데이터에 lock을 걸어 수정이 불가능하게 처리
				    -serializable : select 문이 사용되는 데이터에 lock을 걸어 수정 및 입력이 불가능하게 처리
				
				2) rollback-for: 어떤 예외가 발생했을 때 롤백 시킬지 지정
				3) no-rollback-for: 어떤 예외가 발생했을 때 롤백 시키지 않을지 지정
				4) propagation: 전파속성, 기존 트랜잭션 유무 여부에 따라 새로운 트랜잭션을 생성하는 정책
					- required : 이미 진행중인 트랜잭션이 있으면 해당 트랜잭션에 포함, 아니면 새로운 트랜잭션 생성
					- required_new : 항상 새로운 트랜잭션 생성 (안씀)
					- mondatory : 이미 진행중인 트랜잭션이 있어야만 작업을 수행, 없으면 예외를 발생시킴
					- never : 진행중인 트랜잭션이 없어야만 작업 수행 , 있으면 예외를 발생시킴
					- nested : 진행중인 트랜잭션이 있으면 중첩된 트랜잭션 실행
					- supports : 진행중인 트랜잭션이 있으면 트랜잭션에 포함. 없으면 트랜잭션을 생성하지 않음.
					
				5) read-only: 읽기 전용 , DML이 발생하면 에러 발생시킴
				6) timeout: 작업에 수행되는 시간이 지정한 시간을 넘기면 rollback처리
			
			 -->

			<tx:method name="select*"  read-only="true"/>
			<tx:method name="insert*" isolation="DEFAULT"  propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" isolation="DEFAULT" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED" rollback-for="Exception"/>
			<!-- select* , insert* , delete* ,update*로 시작하는 모든 메서드들에 대해 트랜잭션 관리 -->
		</tx:attributes>
	
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.kh.spring..*.*ServiceImpl.*(..))" id="txPointCut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
	</aop:config>
	
	
	<tx:annotation-driven/>
	
	
</beans:beans>
